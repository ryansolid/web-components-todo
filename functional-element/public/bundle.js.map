{"version":3,"file":"bundle.js","sources":["../node_modules/lit-html/lib/directive.js","../node_modules/lit-html/lib/dom.js","../node_modules/lit-html/lib/part.js","../node_modules/lit-html/lib/template.js","../node_modules/lit-html/lib/template-instance.js","../node_modules/lit-html/lib/template-result.js","../node_modules/lit-html/lib/parts.js","../node_modules/lit-html/lib/default-template-processor.js","../node_modules/lit-html/lib/template-factory.js","../node_modules/lit-html/lib/render.js","../node_modules/lit-html/lit-html.js","../src/todo-input.js","../src/todo-item.js","../src/my-todo.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\nexport const directive = (f) => {\n    directives.set(f, true);\n    return f;\n};\nexport const isDirective = (o) => typeof o === 'function' && directives.has(o);\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !== undefined;\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, not attribute positions,\n * in template.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\nexport const rewritesStyleAttribute = (() => {\n    const el = document.createElement('div');\n    el.setAttribute('style', '{{bad value}}');\n    return el.getAttribute('style') !== '{{bad value}}';\n})();\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        const _prepareTemplate = (template) => {\n            const content = template.content;\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n                   NodeFilter.SHOW_TEXT */, null, false);\n            // The actual previous node, accounting for removals: if a node is removed\n            // it will never be the previousNode.\n            let previousNode;\n            // Used to set previousNode at the top of the loop.\n            let currentNode;\n            while (walker.nextNode()) {\n                index++;\n                previousNode = currentNode;\n                const node = currentNode = walker.currentNode;\n                if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                    if (node.hasAttributes()) {\n                        const attributes = node.attributes;\n                        // Per\n                        // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                        // attributes are not guaranteed to be returned in document order.\n                        // In particular, Edge/IE can return them out of order, so we cannot\n                        // assume a correspondance between part index and attribute index.\n                        let count = 0;\n                        for (let i = 0; i < attributes.length; i++) {\n                            if (attributes[i].value.indexOf(marker) >= 0) {\n                                count++;\n                            }\n                        }\n                        while (count-- > 0) {\n                            // Get the template literal section leading up to the first\n                            // expression in this attribute\n                            const stringForPart = result.strings[partIndex];\n                            // Find the attribute name\n                            const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                            // Find the corresponding attribute\n                            // If the attribute name contains special characters, lower-case\n                            // it so that on XML nodes with case-sensitive getAttribute() we\n                            // can still find the attribute, which will have been lower-cased\n                            // by the parser.\n                            //\n                            // If the attribute name doesn't contain special character, it's\n                            // important to _not_ lower-case it, in case the name is\n                            // case-sensitive, like with XML attributes like \"viewBox\".\n                            const attributeLookupName = (rewritesStyleAttribute && name === 'style') ?\n                                'style$' :\n                                /^[a-zA-Z-]*$/.test(name) ? name : name.toLowerCase();\n                            const attributeValue = node.getAttribute(attributeLookupName);\n                            const strings = attributeValue.split(markerRegex);\n                            this.parts.push({ type: 'attribute', index, name, strings });\n                            node.removeAttribute(attributeLookupName);\n                            partIndex += strings.length - 1;\n                        }\n                    }\n                    if (node.tagName === 'TEMPLATE') {\n                        _prepareTemplate(node);\n                    }\n                }\n                else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                    const nodeValue = node.nodeValue;\n                    if (nodeValue.indexOf(marker) < 0) {\n                        continue;\n                    }\n                    const parent = node.parentNode;\n                    const strings = nodeValue.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        parent.insertBefore((strings[i] === '') ? createMarker() :\n                            document.createTextNode(strings[i]), node);\n                        this.parts.push({ type: 'node', index: index++ });\n                    }\n                    parent.insertBefore(strings[lastIndex] === '' ?\n                        createMarker() :\n                        document.createTextNode(strings[lastIndex]), node);\n                    nodesToRemove.push(node);\n                }\n                else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                    if (node.nodeValue === marker) {\n                        const parent = node.parentNode;\n                        // Add a new marker node to be the startNode of the Part if any of\n                        // the following are true:\n                        //  * We don't have a previousSibling\n                        //  * previousSibling is being removed (thus it's not the\n                        //    `previousNode`)\n                        //  * previousSibling is not a Text node\n                        //\n                        // TODO(justinfagnani): We should be able to use the previousNode\n                        // here as the marker node and reduce the number of extra nodes we\n                        // add to a template. See\n                        // https://github.com/PolymerLabs/lit-html/issues/147\n                        const previousSibling = node.previousSibling;\n                        if (previousSibling === null || previousSibling !== previousNode ||\n                            previousSibling.nodeType !== Node.TEXT_NODE) {\n                            parent.insertBefore(createMarker(), node);\n                        }\n                        else {\n                            index--;\n                        }\n                        this.parts.push({ type: 'node', index: index++ });\n                        nodesToRemove.push(node);\n                        // If we don't have a nextSibling add a marker node.\n                        // We don't have to check if the next node is going to be removed,\n                        // because that node will induce a new marker if so.\n                        if (node.nextSibling === null) {\n                            parent.insertBefore(createMarker(), node);\n                        }\n                        else {\n                            index--;\n                        }\n                        currentNode = previousNode;\n                        partIndex++;\n                    }\n                    else {\n                        let i = -1;\n                        while ((i = node.nodeValue.indexOf(marker, i + 1)) !== -1) {\n                            // Comment node has a binding marker inside, make an inactive part\n                            // The binding won't work, but subsequent bindings will\n                            // TODO (justinfagnani): consider whether it's even worth it to\n                            // make bindings in comments work\n                            this.parts.push({ type: 'node', index: -1 });\n                        }\n                    }\n                }\n            }\n        };\n        _prepareTemplate(element);\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this._parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // When using the Custom Elements polyfill, clone the node, rather than\n        // importing it, to keep the fragment in the template's document. This\n        // leaves the fragment inert so custom elements won't upgrade and\n        // potentially modify their contents by creating a polyfilled ShadowRoot\n        // while we traverse the tree.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const parts = this.template.parts;\n        let partIndex = 0;\n        let nodeIndex = 0;\n        const _prepareInstance = (fragment) => {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            let node = walker.nextNode();\n            // Loop through all the nodes and parts of a template\n            while (partIndex < parts.length && node !== null) {\n                const part = parts[partIndex];\n                // Consecutive Parts may have the same node index, in the case of\n                // multiple bound attributes on an element. So each iteration we either\n                // increment the nodeIndex, if we aren't on a node with a part, or the\n                // partIndex if we are. By not incrementing the nodeIndex when we find a\n                // part, we allow for the next part to be associated with the current\n                // node if neccessasry.\n                if (!isTemplatePartActive(part)) {\n                    this._parts.push(undefined);\n                    partIndex++;\n                }\n                else if (nodeIndex === part.index) {\n                    if (part.type === 'node') {\n                        const part = this.processor.handleTextExpression(this.options);\n                        part.insertAfterNode(node);\n                        this._parts.push(part);\n                    }\n                    else {\n                        this._parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n                    }\n                    partIndex++;\n                }\n                else {\n                    nodeIndex++;\n                    if (node.nodeName === 'TEMPLATE') {\n                        _prepareInstance(node.content);\n                    }\n                    node = walker.nextNode();\n                }\n            }\n        };\n        _prepareInstance(fragment);\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { reparentNodes } from './dom.js';\nimport { lastAttributeNameRegex, marker, nodeMarker, rewritesStyleAttribute } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isTextBinding = true;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            html += s;\n            const close = s.lastIndexOf('>');\n            // We're in a text position if the previous string closed its last tag, an\n            // attribute position if the string opened an unclosed tag, and unchanged\n            // if the string had no brackets at all:\n            //\n            // \"...>...\": text position. open === -1, close > -1\n            // \"...<...\": attribute position. open > -1\n            // \"...\": no change. open === -1, close === -1\n            isTextBinding =\n                (close > -1 || isTextBinding) && s.indexOf('<', close + 1) === -1;\n            if (!isTextBinding && rewritesStyleAttribute) {\n                html = html.replace(lastAttributeNameRegex, (match, p1, p2, p3) => {\n                    return (p2 === 'style') ? `${p1}style$${p3}` : match;\n                });\n            }\n            html += isTextBinding ? nodeMarker : marker;\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => (value === null ||\n    !(typeof value === 'object' || typeof value === 'function'));\n/**\n * Sets attribute values for AttributeParts, so that the value is only set once\n * even if there are multiple parts for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (v != null &&\n                    (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n                else {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\nexport class AttributePart {\n    constructor(comitter) {\n        this.value = undefined;\n        this.committer = comitter;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Inserts this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and\n     * its next sibling must be static, unchanging nodes such as those that appear\n     * in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part._insert(this.startNode = createMarker());\n        part._insert(this.endNode = createMarker());\n    }\n    /**\n     * Appends this part after `ref`\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref._insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        const value = this._pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this._commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this._commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this._commitNode(value);\n        }\n        else if (Array.isArray(value) || value[Symbol.iterator]) {\n            this._commitIterable(value);\n        }\n        else if (value.then !== undefined) {\n            this._commitPromise(value);\n        }\n        else {\n            // Fallback, will render the string representation\n            this._commitText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this.value = value;\n    }\n    _commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === Node.TEXT_NODE) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.textContent = value;\n        }\n        else {\n            this._commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));\n        }\n        this.value = value;\n    }\n    _commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value && this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this._commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    _commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    _commitPromise(value) {\n        this.value = value;\n        value.then((v) => {\n            if (this.value === value) {\n                this.setValue(v);\n                this.commit();\n            }\n        });\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const value = !!this._pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n        }\n        this.value = value;\n        this._pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    window.addEventListener('test', options, options);\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const newListener = this._pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this, this._options);\n        }\n        this._options = getOptions(newListener);\n        if (shouldAddListener) {\n            this.element.addEventListener(this.eventName, this, this._options);\n        }\n        this.value = newListener;\n        this._pendingValue = noChange;\n    }\n    handleEvent(event) {\n        const listener = (typeof this.value === 'function') ?\n            this.value :\n            (typeof this.value.handleEvent === 'function') ?\n                this.value.handleEvent :\n                () => null;\n        listener.call(this.eventContext || this.element, event);\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const comitter = new PropertyCommitter(element, name.slice(1), strings);\n            return comitter.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const comitter = new AttributeCommitter(element, name, strings);\n        return comitter.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        template = new Template(result, result.getTemplateElement());\n        templateCache.set(result.strings, template);\n    }\n    return template;\n}\n// The first argument to JS template tags retain identity across multiple\n// calls to a tag for the same literal, so we can cache work done per literal\n// in a Map.\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport * from './lib/template-result.js';\nexport * from './lib/template.js';\nexport * from './lib/default-template-processor.js';\nexport * from './lib/template-instance.js';\nexport * from './lib/part.js';\nexport * from './lib/parts.js';\nexport * from './lib/dom.js';\nexport * from './lib/directive.js';\nexport * from './lib/render.js';\nexport * from './lib/template-factory.js';\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","import { customElement, html } from 'functional-element';\n\ncustomElement('todo-input', ({ element }) => {\n    return html`\n        <style>\n            form {\n                position: relative;\n                font-size: 24px;\n                border-bottom: 1px solid #ededed;\n            }\n\n            input[type=text] {\n                padding: 16px 16px 16px 60px;\n                border: none;\n                background: rgba(0, 0, 0, 0.003);\n                position: relative;\n                margin: 0;\n                width: 100%;\n                font-size: 24px;\n                font-family: inherit;\n                font-weight: inherit;\n                line-height: 1.4em;\n                border: 0;\n                outline: none;\n                color: inherit;\n                padding: 6px;\n                border: 1px solid #CCC;\n                box-shadow: inset 0 -1px 5px 0 rgba(0, 0, 0, 0.2);\n                box-sizing: border-box;\n            }\n        </style>\n\n        <form @submit=${(e) => onSubmit(e, element)}>\n            <input type=\"text\" placeholder=\"What needs to be done?\" />\n        </form>\n    `;\n});\n\nfunction onSubmit(e, element) {\n    const $input = element.querySelector('input');\n    e.stopPropagation();\n    e.preventDefault();\n    if (!$input.value) return;\n    element.dispatchEvent(new CustomEvent('submit', { detail: $input.value }));\n    $input.value = '';\n}","import { customElement, html } from 'functional-element';\n\ncustomElement('todo-item', ({ constructing, props, element }) => {\n    if (constructing) {\n        return {\n            text: '',\n            checked: false,\n            index: 0\n        };\n    }\n\n    return html`\n        <style>\n            :host {\n                display: block;\n            }\n\n            li {\n                font-size: 24px;\n                display: block;\n                position: relative;\n                border-bottom: 1px solid #ededed;\n            }\n\n            li input {\n                text-align: center;\n                width: 40px;\n                /* auto, since non-WebKit browsers doesn't support input styling */\n                height: auto;\n                position: absolute;\n                top: 9px;\n                bottom: 0;\n                margin: auto 0;\n                border: none;\n                /* Mobile Safari */\n                -webkit-appearance: none;\n                appearance: none;\n            }\n\n            li input:after {\n                content: url('data:image/svg+xml;utf8,<svg%20xmlns%3D\"http%3A//www.w3.org/2000/svg\"%20width%3D\"40\"%20height%3D\"40\"%20viewBox%3D\"-10%20-18%20100%20135\"><circle%20cx%3D\"50\"%20cy%3D\"50\"%20r%3D\"50\"%20fill%3D\"none\"%20stroke%3D\"%23ededed\"%20stroke-width%3D\"3\"/></svg>');\n            }\n\n            li input:checked:after {\n                content: url('data:image/svg+xml;utf8,<svg%20xmlns%3D\"http%3A//www.w3.org/2000/svg\"%20width%3D\"40\"%20height%3D\"40\"%20viewBox%3D\"-10%20-18%20100%20135\"><circle%20cx%3D\"50\"%20cy%3D\"50\"%20r%3D\"50\"%20fill%3D\"none\"%20stroke%3D\"%23bddad5\"%20stroke-width%3D\"3\"/><path%20fill%3D\"%235dc2af\"%20d%3D\"M72%2025L42%2071%2027%2056l-4%204%2020%2020%2034-52z\"/></svg>');\n            }\n\n\n            li label {\n                white-space: pre;\n                word-break: break-word;\n                padding: 15px 60px 15px 15px;\n                margin-left: 45px;\n                display: block;\n                line-height: 1.2;\n                transition: color 0.4s;\n            }\n\n            li.completed label {\n                color: #d9d9d9;\n                text-decoration: line-through;\n            }\n\n            li button,\n            li input[type=\"checkbox\"] {\n                outline: none;\n            }\n\n            li button {\n                margin: 0;\n                padding: 0;\n                border: 0;\n                background: none;\n                font-size: 100%;\n                vertical-align: baseline;\n                font-family: inherit;\n                font-weight: inherit;\n                color: inherit;\n                -webkit-appearance: none;\n                appearance: none;\n                -webkit-font-smoothing: antialiased;\n                -moz-font-smoothing: antialiased;\n                font-smoothing: antialiased;\n            }\n\n            li button {\n                position: absolute;\n                top: 0;\n                right: 10px;\n                bottom: 0;\n                width: 40px;\n                height: 40px;\n                margin: auto 0;\n                font-size: 30px;\n                color: #cc9a9a;\n                margin-bottom: 11px;\n                transition: color 0.2s ease-out;\n            }\n\n            li button:hover {\n                color: #af5b5e;\n            }\n        </style>\n\n        <li>\n            <input type=\"checkbox\" .checked=${props.checked} @click=\"${() => onToggle(element, props.index)}\">\n            <label>${props.text}</label>\n            <button @click=\"${() => onRemove(element, props.index)}\">x</button>\n        </li>\n    `;\n});\n\nfunction onRemove(element, index) {\n    element.dispatchEvent(new CustomEvent('remove', { detail: index }));\n}\n\nfunction onToggle(element, index) {\n    element.dispatchEvent(new CustomEvent('toggle', { detail: index }));\n}","import { customElement, html } from 'functional-element';\nimport './todo-input.js';\nimport './todo-item.js';\n\ncustomElement('my-todo', ({ constructing, props, update }) => {\n    if (constructing) {\n        return {\n            list: [\n                { text: 'my initial todo', checked: false },\n                { text: 'Learn about Web Components', checked: true },\n            ]\n        };\n    }\n\n    return html`\n        <style>\n            h1 {\n                font-size: 70px;\n                line-height: 70px;\n                font-weight: 100;\n                text-align: center;\n                color: rgba(175, 47, 47, 0.15);\n            }\n\n            section {\n                background: #fff;\n                margin: 30px 0 40px 0;\n                position: relative;\n                box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 25px 50px 0 rgba(0, 0, 0, 0.1);\n            }\n\n            #list-container {\n                margin: 0;\n                padding: 0;\n                list-style: none;\n                border-top: 1px solid #e6e6e6;\n            }\n        </style>\n\n        <h1>Todos Functional Element</h1>\n\n        <section>\n            <todo-input @submit=${(e) => update(addItem(props.list, e.detail))}></todo-input>\n            ${props.list.map((item, index) => html`\n                <todo-item\n                    .text=${item.text}\n                    .checked=${item.checked}\n                    .index=${index}\n                    @remove=${(e) => update(removeItem(props.list, e.detail))}\n                    @toggle=${(e) => update(toggleItem(props.list, e.detail))}\n                ></todo-item>`)}\n            <ul id=\"list-container\"></ul>\n        </section>\n    `;\n});\n\nfunction addItem(list, text) {\n    return {\n        list: [...list, { text, checked: false, }]\n    };\n}\n\nfunction removeItem(list, index) {\n    return {\n        list: [...list.slice(0, index), ...list.slice(index + 1)]\n    };\n}\n\nfunction toggleItem(list, index) {\n    const originalList = [...list];\n    const item = originalList[index];\n    originalList[index] = Object.assign({}, item, { checked: !item.checked });\n\n    return {\n        list: originalList\n    };\n}"],"names":["directives","WeakMap","isDirective","o","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","removeNodes","container","startNode","endNode","node","n","nextSibling","removeChild","noChange","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","rewritesStyleAttribute","el","document","createElement","setAttribute","getAttribute","Template","[object Object]","result","element","this","parts","index","partIndex","nodesToRemove","_prepareTemplate","template","content","walker","createTreeWalker","previousNode","currentNode","nextNode","nodeType","hasAttributes","attributes","count","i","length","value","indexOf","stringForPart","strings","name","lastAttributeNameRegex","exec","attributeLookupName","test","toLowerCase","split","push","type","removeAttribute","tagName","nodeValue","parent","parentNode","lastIndex","insertBefore","createMarker","createTextNode","previousSibling","Node","TEXT_NODE","isTemplatePartActive","part","createComment","TemplateInstance","processor","options","_parts","values","setValue","commit","fragment","cloneNode","importNode","nodeIndex","_prepareInstance","handleTextExpression","insertAfterNode","handleAttributeExpressions","nodeName","adoptNode","upgrade","TemplateResult","l","html","isTextBinding","s","close","lastIndexOf","replace","match","p1","p2","p3","innerHTML","getHTML","isPrimitive","AttributeCommitter","dirty","_createPart","AttributePart","text","v","Array","isArray","Symbol","iterator","t","_getValue","comitter","committer","directive","NodePart","_pendingValue","appendChild","ref","_insert","_commitText","_commitTemplateResult","_commitNode","_commitIterable","then","_commitPromise","clear","textContent","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","BooleanAttributePart","Error","PropertyCommitter","super","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","_options","getOptions","event","handleEvent","call","defaultTemplateProcessor","prefix","templateCache","templateCaches","get","Map","set","getTemplateElement","render","firstChild","Object","assign","appendInto","customElement","e","$input","querySelector","stopPropagation","preventDefault","dispatchEvent","CustomEvent","detail","onSubmit","constructing","props","checked","onToggle","onRemove","list","addItem","map","removeItem","originalList","toggleItem"],"mappings":"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"}